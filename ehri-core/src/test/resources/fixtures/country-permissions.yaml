#
# This set of fixtures outlines a scenario:
#
#  A repository has two types of users. Head archivists, who can create, update, and delete
#  any items at all, and regular archivists, who can create items, and update/delete their
#  own items, but not update/delete those of other archivists.
#
#

# Countries - these are at the top of the entity hierarchy and
# 'hold' everything else.
- id: gb
  type: Country
  data:
    identifier: gb

- id: nl
  type: Country
  data:
    identifier: nl

# Institutions
- id: repo-gb
  type: Repository
  data:
    identifier: repo-gb
    name: Repository
  relationships:
    hasCountry: gb
    hasPermissionScope: gb
    describes:
      - id: rd1
        type: RepositoryDescription
        data:
          name: Repository Name
          languageCode: en
        relationships:

- id: repo-nl
  type: Repository
  data:
    identifier: repo-nl
    name: Repository
  relationships:
    hasCountry: gb
    hasPermissionScope: nl
    describes:
      - id: rd2
        type: RepositoryDescription
        data:
          name: Repository Name
          languageCode: nl
        relationships:

# Two groups

- id: gb-users
  type: Group
  data:
    identifier: gb-users
    name: GB Archivists
    description: Archivists who can write to stuff in country GB

- id: nl-users
  type: Group
  data:
    identifier: nl-users
    name: NL Archivists
    description: Archivists who can write to stuff in country NL


- id: gbuser
  type: UserProfile
  data:
    identifier: gbuser
    name: User GB
  relationships:
    belongsTo: gb-users

- id: nluser
  type: UserProfile
  data:
    identifier: nluser
    name: User NL
  relationships:
    belongsTo: nl-users


--- # Permission grants

# Allow CUD of repos and docs in GB
- id: gbDocCreateGrant
  type: PermissionGrant
  relationships:
    hasPermission: create
    hasTarget: DocumentaryUnit
    hasScope: gb
    hasAccessor: gb-users
    
- id: gbDocUpdateGrant
  type: PermissionGrant
  relationships:
    hasPermission: update
    hasTarget: DocumentaryUnit
    hasScope: gb
    hasAccessor: gb-users

- id: gbDocDeleteGrant
  type: PermissionGrant
  relationships:
    hasPermission: delete
    hasTarget: DocumentaryUnit
    hasScope: gb
    hasAccessor: gb-users

- id: gbRepoCreateGrant
  type: PermissionGrant
  relationships:
    hasPermission: create
    hasTarget: Repository
    hasScope: gb
    hasAccessor: gb-users
    
- id: gbRepoUpdateGrant
  type: PermissionGrant
  relationships:
    hasPermission: update
    hasTarget: Repository
    hasScope: gb
    hasAccessor: gb-users

- id: gbRepoDeleteGrant
  type: PermissionGrant
  relationships:
    hasPermission: delete
    hasTarget: Repository
    hasScope: gb
    hasAccessor: gb-users

# Do the same for NL

# Allow CUD of repos and docs in NL
- id: nlDocCreateGrant
  type: PermissionGrant
  relationships:
    hasPermission: create
    hasTarget: DocumentaryUnit
    hasScope: nl
    hasAccessor: nl-users
    
- id: nlDocUpdateGrant
  type: PermissionGrant
  relationships:
    hasPermission: update
    hasTarget: DocumentaryUnit
    hasScope: nl
    hasAccessor: nl-users

- id: nlDocDeleteGrant
  type: PermissionGrant
  relationships:
    hasPermission: delete
    hasTarget: DocumentaryUnit
    hasScope: nl
    hasAccessor: nl-users

- id: nlRepoCreateGrant
  type: PermissionGrant
  relationships:
    hasPermission: create
    hasTarget: Repository
    hasScope: nl
    hasAccessor: nl-users
    
- id: nlRepoUpdateGrant
  type: PermissionGrant
  relationships:
    hasPermission: update
    hasTarget: Repository
    hasScope: nl
    hasAccessor: nl-users

- id: nlRepoDeleteGrant
  type: PermissionGrant
  relationships:
    hasPermission: delete
    hasTarget: Repository
    hasScope: nl
    hasAccessor: nl-users

