#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import lxml.etree as ET
import urllib2
import requests

BASE_URL = "http://archiveshub.ac.uk/api/OAI-PMH/2.0/hub"
SET_SPEC = "institution:http://130.88.26.171:8081/services/vspokes/wiener"

OUTDIR = sys.argv[1]


def write_ead(identifier, ead):
    if not os.path.exists(OUTDIR):
        os.mkdir(OUTDIR)
    with file(os.path.join(OUTDIR, identifier + ".xml"), "w") as f:
        f.write(ET.tostring(ead, pretty_print=True, encoding="utf-8"))
    print(identifier)

def fetch_batch(token):

    payload = {"verb": "ListRecords"}
    if token is None:
        payload["set"] = SET_SPEC
        payload["metadataPrefix"] = "ead"
    else:
        # NB: Note weird double encoding thing - not sure this is in the spec!
        payload["resumptionToken"] = token

    r = requests.get(BASE_URL, params=payload)
    parser = ET.XMLParser(ns_clean=False, recover=True, encoding='utf-8', remove_blank_text=True)
    root = ET.fromstring(r.text.encode("utf-8"), parser=parser)

    ns = {"xmlns": "http://www.openarchives.org/OAI/2.0/", "dc": "http://purl.org/dc/elements/1.1/"}

    for lr in root.findall("xmlns:ListRecords", namespaces=ns):
        for record in lr.findall("xmlns:record", namespaces=ns):
            header = record.find("xmlns:header", namespaces=ns)
            identifier = header.find("xmlns:identifier", namespaces=ns).text
            metadata = record.find("xmlns:metadata", namespaces=ns)

            write_ead(identifier, metadata.find("xmlns:ead", namespaces=ns)) 

        for token in lr.findall("xmlns:resumptionToken", namespaces=ns):
            fetch_batch(urllib2.unquote(urllib2.unquote(token.text)))
        

if __name__ == "__main__":
    fetch_batch(token=None)
